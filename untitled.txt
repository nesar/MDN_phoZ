# For approach a, perturb each band by 5 delta_c's between 5 and 50%. Plot each of those outcomes (one plot per band)
approach = 'a'
metric_name = "outFrac"
delta_c = [1.05, 1.1, 1.2, 1.3, 1.4, 1.5]
sigma_y_lims = [0,0.35]
sigma_y_lims_rel = [-1,5]
outFr_y_lims = [0,100]
outFr_y_lims_rel = [-0.5,1.5]

for band_n in [0, 1, 2, 3, 4]:
    fig, (ax1, ax2) = plt.subplots(2, 1, sharex = True, gridspec_kw={'height_ratios': [3, 2]})
    # Start with original
    og_y_pred_mean, og_y_pred_std = help_funcs.predict(X_test, preproc, model_train)
    og_sigmaNMAD_array, og_outFr_array, bins = help_funcs.validate(y_test, preproc, og_y_pred_mean) #preproc or preproc_y?
    if metric_name == "sigma":
        og_metric = og_sigmaNMAD_array
        y_lims = sigma_y_lims
        y_lims_rel = sigma_y_lims_rel
    elif metric_name == "outFrac":
        og_metric = og_outFr_array
        y_lims = outFr_y_lims
        y_lims_rel = outFr_y_lims_rel
    fig, ax1 = help_funcs.plot_metric(og_metric, metric_name, approach, band_n, fig = fig, ax = ax1, label = "original", color = "black")
    ax1.legend()
    
    # Now perturb
    prtb_X_test_lst = help_funcs.perturb(X_test, band_n, delta_c, approach, X_err = X_err)
    for i, prtb_X_test in enumerate(prtb_X_test_lst):
        prtb_y_pred_mean, prtb_y_pred_std = help_funcs.predict(prtb_X_test, preproc, model_train)
        this_label = str(math.trunc((delta_c[i] - 1)*100 + 0.5)) + "%"

        sigmaNMAD_array, outFr_array, bins = help_funcs.validate(y_test, prtb_y_pred_mean)
        if metric_name == "sigma":
            metric = sigmaNMAD_array
        elif metric_name == "outFrac":
            metric = outFr_array
        fig, ax1 = help_funcs.plot_metric(metric, metric_name, approach, band_n, fig = fig, ax = ax1, label = this_label, linestyle = '--')
        ax1.legend()
    
        # Look at relative difference
        relative_diff = (metric[:-1] - og_metric[:-1]) / og_metric[:-1] # remove last value, which is always 0
        #print(relative_diff)
        ax2.plot(bins[:-1], relative_diff, linestyle = ":")
        ax2.set_ylabel("Rel diff")
        ax2.set_xlabel("z bins")
    
    
    ax1.set_ylim(y_lims[0],y_lims[1])
    ax1.set_xlim(0,1)
    ax2.set_ylim(y_lims_rel[0],y_lims_rel[1])
    ax2.set_xlim(0,1)
    fig.savefig(metric_name + "_" + approach + "_band_" + str(band_n) + "_rel" + ".png")
    fig.show()